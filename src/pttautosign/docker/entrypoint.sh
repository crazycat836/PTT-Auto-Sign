#!/bin/bash
# PTT Auto Sign Docker Entrypoint Script
# 功能：Docker 容器的入口點腳本
# 用途：確保 Docker 容器正確設置環境並執行適當的腳本

set -e

# Set timezone
export TZ=Asia/Taipei

# Create data directory
mkdir -p /app/data

# Create scripts directory if it doesn't exist
mkdir -p /app/scripts

# Copy scripts from source if they exist
if [ -f "/app/scripts/simple_runner.sh" ]; then
    echo "Scripts already in place"
else
    echo "Copying scripts to proper location..."
    # Copy from the root of the project if available
    if [ -f "/scripts/simple_runner.sh" ]; then
        cp /scripts/simple_runner.sh /app/scripts/
    elif [ -f "/app/src/pttautosign/scripts/simple_runner.sh" ]; then
        cp /app/src/pttautosign/scripts/simple_runner.sh /app/scripts/
    else
        echo "Warning: Could not find simple_runner.sh script"
        # Create a minimal script that runs the main module
        cat > /app/scripts/simple_runner.sh << 'EOL'
#!/bin/bash
# Simple runner fallback script
echo "Running PTT Auto Sign from fallback script"
cd /app
python -m pttautosign.main
EOL
    fi
    chmod +x /app/scripts/simple_runner.sh
fi

# Set environment variables
export PYTHONPATH=/app
export PYTHONDONTWRITEBYTECODE=1
export PYTHONUNBUFFERED=1
export PYTHONIOENCODING=utf-8
export PYTHONWARNINGS=ignore
export PYPTT_DISABLE_LOGS=1

# Create log directory
mkdir -p /var/log
touch /var/log/cron.log

# Check required environment variables
echo "Checking required environment variables..."
missing_vars=0

if [ -z "$PTT_USERNAME" ]; then
    echo "ERROR: PTT_USERNAME is empty. Please provide it when running the container with -e PTT_USERNAME=your_username"
    missing_vars=$((missing_vars + 1))
fi

if [ -z "$PTT_PASSWORD" ]; then
    echo "ERROR: PTT_PASSWORD is empty. Please provide it when running the container with -e PTT_PASSWORD=your_password"
    missing_vars=$((missing_vars + 1))
fi

if [ -z "$TELEGRAM_BOT_TOKEN" ]; then
    echo "ERROR: TELEGRAM_BOT_TOKEN is empty. Please provide it with -e TELEGRAM_BOT_TOKEN=your_bot_token"
    missing_vars=$((missing_vars + 1))
fi

if [ -z "$TELEGRAM_CHAT_ID" ]; then
    echo "ERROR: TELEGRAM_CHAT_ID is empty. Please provide it with -e TELEGRAM_CHAT_ID=your_chat_id"
    missing_vars=$((missing_vars + 1))
fi

if [ $missing_vars -gt 0 ]; then
    echo ""
    echo "Example usage:"
    echo "docker run -d \\"
    echo "  --name ptt-auto-sign \\"
    echo "  --restart unless-stopped \\"
    echo "  -e PTT_USERNAME=your_username \\"
    echo "  -e PTT_PASSWORD=your_password \\"
    echo "  -e TELEGRAM_BOT_TOKEN=your_bot_token \\"
    echo "  -e TELEGRAM_CHAT_ID=your_chat_id \\"
    echo "  crazycat836/pttautosign:latest"
    echo ""
    echo "Alternatively, you can use an .env file:"
    echo "docker run -d \\"
    echo "  --name ptt-auto-sign \\"
    echo "  --restart unless-stopped \\"
    echo "  --env-file .env \\"
    echo "  crazycat836/pttautosign:latest"
    echo ""
    exit 1
fi

# Copy .env file if it exists
if [ -f "/app/.env" ]; then
    echo "Using existing .env file"
else
    echo "Creating .env file from environment variables..."
    cat > /app/.env << EOL
# PTT Auto Sign Environment Variables
# Generated by Docker entrypoint script

# PTT Account Settings
PTT_USERNAME=${PTT_USERNAME}
PTT_PASSWORD=${PTT_PASSWORD}

# Telegram Settings
TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}

# Cron Settings
CRON_DATA_DIR=/app/data
EOL
fi

# Load environment variables from .env file
if [ -f "/app/.env" ]; then
    echo "Loading environment variables from .env file..."
    export $(cat /app/.env | grep -v '^#' | xargs)
fi

# Debug: Show Python version and installed packages
echo "Python version:"
python --version
echo "Installed packages:"
pip list

# Install telnetlib3 if not already installed
if ! pip list | grep -q telnetlib3; then
    echo "Installing telnetlib3..."
    pip install --no-cache-dir telnetlib3
    echo "telnetlib3 installed successfully."
else
    echo "telnetlib3 is already installed."
fi

# Verify telnetlib3 installation
echo "Verifying telnetlib3 installation..."
if python -c "import telnetlib3; print('telnetlib3 imported successfully')" 2>/dev/null; then
    echo "telnetlib3 verification successful."
else
    echo "Warning: telnetlib3 verification failed. Installing again..."
    pip uninstall -y telnetlib3
    pip install --no-cache-dir telnetlib3
    
    # Check again
    if python -c "import telnetlib3; print('telnetlib3 imported successfully')" 2>/dev/null; then
        echo "telnetlib3 reinstallation successful."
    else
        echo "Error: telnetlib3 installation failed. Continuing anyway..."
    fi
fi

# Set up cron job if enabled
echo "Setting up cron job using random_cron.sh..."
echo "Running in test mode: will execute every minute for 5 times"

# Run random_cron.sh to setup the cron job
/usr/local/bin/random_cron.sh

# Start cron service
echo "Starting cron service..."
service cron start

# Check cron service status
if service cron status > /dev/null 2>&1; then
    echo "Cron service started successfully"
    echo "Cron jobs configured:"
    crontab -l
    echo "Monitoring cron logs..."
    # Show cron logs with timestamps
    tail -f /var/log/cron.log | while read line; do
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $line"
    done &
else
    echo "Failed to start cron service"
    exit 1
fi

# Run the application in the background
echo "Starting PTT Auto Sign application..."
python -m pttautosign.main &

# Keep the container running
echo "Container is running. Press Ctrl+C to exit."
tail -f /dev/null 